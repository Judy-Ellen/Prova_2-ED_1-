#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct No{
  int dado;
  struct No* direita;
  struct No* esquerda;
} No;

No* criarArvore(){ return NULL; }

int ArvoreVazia(No* raiz){
  return raiz == NULL;
}

int getValor(No** no){
  if ((*no) != NULL){
    return (*no)->dado;
  }
}

void gerarArquivoDot(FILE** arquivoDot, No* raiz){
  if(raiz != NULL){
    char s1[20];
    char s2[20];
    if (getValor(&raiz->esquerda)!=0){
      sprintf(s1, "%d:sw->%d [ label=\"esq\"];\n", raiz->dado, getValor(&raiz->esquerda));
      fprintf((*arquivoDot), "%s", s1);
    }
    if (getValor(&raiz->direita)!=0){
      sprintf(s2, "%d:se->%d [ label=\"dir\"];\n", raiz->dado, getValor(&raiz->direita));
      fprintf((*arquivoDot), "%s", s2);
    }
    gerarArquivoDot(arquivoDot,raiz->esquerda);//esquerda (subNo)
    gerarArquivoDot(arquivoDot,raiz->direita); //direita (subNo)
  }
}
void inserirDado(No** raiz, int dado){
    if(*raiz == NULL){
      *raiz = (No*)malloc(sizeof(No));
      (*raiz)->esquerda = NULL;
      (*raiz)->direita = NULL;
      (*raiz)->dado = dado;
    } else {
        if(dado < (*raiz)->dado){ //dado menor? vai pra esquerda
            //percorrer subNo da esquerda
            inserirDado(&(*raiz)->esquerda, dado);
        }
        if(dado > (*raiz)->dado){ //dado maior? vai pra direita
            //percorrer subNo da direita
            inserirDado(&(*raiz)->direita, dado);
        }
    }
}

void main(){
int i,j;
int mat[7][7];
int vetor[7];
int aux = 0;
  No* raiz = criarArvore();
  for(i=0;i<7;i++)
    for(j=0;j<7;j++){
        mat[i][j] = rand() % 110;
        }
//IMPRIMIR A MATRIZ
printf("Matriz 7X7 aleatória\n");
        for(i=0;i<7;i++){
        for(j=0;j<7;j++)
        printf("%d ",mat[i][j]);
        printf("\n");

    }
//ORDENANDO A DIAGONAL PRINCIPAL
for(i=0;i<7;i++){
    for(j=0;j<7;j++)
        if(i==j)
    vetor[i]=mat[i][j];
}
for (int i = 0; i < 7; i++) {
    for (int j = 0; j < 7 - 1; j++) {
        if (vetor[j] > vetor[j + 1]) {
            aux = vetor[j];
            vetor[j] = vetor[j + 1];
            vetor[j + 1] = aux;
        }
    }
}
//IMPRESSÃO DA DIAGONAL PRINCIPAL
printf("\nDiagonal principal ordenada\n");
for (int i = 0; i < 7; i++) {

printf("%d\t", vetor[i]);
}
//Arvore
  for (int i = 0; i < 7; i++) {
    inserirDado(&raiz, vetor[i]);
  }
  FILE* arquivoDot;
  arquivoDot = fopen("arvore.dot", "w");
  fprintf(arquivoDot, "%s", "digraph G {\nsplines=line;\n");
  gerarArquivoDot(&arquivoDot, raiz);
  fprintf(arquivoDot, "%s", "}\n");
  fclose(arquivoDot);
  free(raiz);
  system("dot -Tpng arvore.dot -o arvore.png");
}
